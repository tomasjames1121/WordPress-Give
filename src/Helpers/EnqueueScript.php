<?php

namespace Give\Helpers;

/**
 * This class use to register script.
 * This class internally uses asset information generated by @wordpress/dependency-extraction-webpack-plugin package.
 * It also handles script translation registration.
 *
 * @unreleased
 */
class EnqueueScript
{
    /**
     * @var string
     */
    private $scriptId;

    /**
     * @var string
     */
    private $scriptPath;

    /**
     * @var array
     */
    private $scriptDependencies = [];

    /**
     * @var string
     */
    private $version = '';

    /**
     * @var bool
     */
    private $loadScriptInFooter = false;

    /**
     * @unreleased
     *
     * @param string $scriptId
     * @param string $scriptPath
     *
     * @return static
     */
    public static function make($scriptId, $scriptPath)
    {
        $self = new static();
        $self->scriptId = $scriptId;
        $self->scriptPath = $scriptPath;

        return $self;
    }

    /**
     * @unreleased
     *
     * @param string $version
     *
     * @return $this
     */
    public function version($version)
    {
        $this->version = $version;
        return $this;
    }

    /**
     * @unreleased
     * @return $this
     */
    public function loadInFooter()
    {
        $this->loadScriptInFooter = true;
        return $this;
    }

    /**
     * @unreleased
     *
     * @param array $scriptDependencies
     *
     * @return $this
     */
    public function dependencies(array $scriptDependencies)
    {
        $this->scriptDependencies = $scriptDependencies;
        return $this;
    }

    /**
     * @unreleased
     * @return $this
     */
    public function register()
    {
        $scriptUrl = plugins_url($this->scriptPath, __FILE__);
        $scriptAssetPath = dir($this->scriptPath) . basename($this->scriptPath, '.js') . '.asset.php';
        $scriptAsset = file_exists($scriptAssetPath)
            ? require($scriptAssetPath)
            : ['dependencies' => [], 'version' => filemtime($this->scriptPath)];

        if ($this->scriptDependencies) {
            $scriptAsset['dependencies'] = array_merge($this->scriptDependencies, $scriptAsset['dependencies']);
        }

        if ($this->version) {
            $scriptAsset['version'] = $this->version;
        }

        wp_register_script(
            $this->scriptId,
            $scriptUrl,
            $scriptAsset['dependencies'],
            $scriptAsset['version'],
            $this->loadScriptInFooter
        );

        return $this;
    }

    /**
     * This function should be called after enqueue or register function.
     *
     * @unreleased
     * @return $this
     */
    public function registerTranslations()
    {
        wp_set_script_translations(
            $this->scriptPath,
            'give',
            GIVE_PLUGIN_DIR . 'languages'
        );

        return $this;
    }

    /**
     * This function should be called after enqueue or register function.
     *
     * @param string $jsVariableName
     * @param mixed $data
     *
     * @return $this
     */
    public function registerLocalizeData($jsVariableName, $data)
    {
        wp_localize_script(
            $this->scriptId,
            $jsVariableName,
            $data
        );

        return $this;
    }

    /**
     * @unreleased
     * @return $this
     */
    public function enqueue()
    {
        if (!wp_script_is($this->scriptId, 'registered')) {
            $this->register();
        }
        wp_enqueue_script($this->scriptId);

        return $this;
    }

    /**
     * @unreleased
     * @return string
     */
    public function getScriptId()
    {
        return $this->scriptId;
    }
}
