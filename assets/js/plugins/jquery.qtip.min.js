/*
 * qTip2 - Pretty powerful tooltips - v2.2.1
 * http://qtip2.com
 *
 * Copyright (c) 2014 
 * Released under the MIT licenses
 * http://jquery.org/license
 *
 * Date: Sun Sep 7 2014 12:09 GMT+0100+0100
 * Plugins: tips modal viewport svg imagemap ie6
 * Styles: core basic css3
 */
/*global window: false, jQuery: false, console: false, define: false */
/* Cache window, document, undefined */
!function(t,e,i){
// Uses AMD or browser globals to create a jQuery plugin.
!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):jQuery&&!jQuery.fn.qtip&&t(jQuery)}(function(s){"use strict";function o(t,e,i,o){
// Elements and ID
this.id=i,this.target=t,this.tooltip=k,this.elements={target:t},
// Internal constructs
this._id=R+"-"+i,this.timers={img:{}},this.options=e,this.plugins={},
// Cache object
this.cache={event:{},target:s(),disabled:I,attr:o,onTooltip:I,lastClass:""},
// Set the initial flags
this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=I}function n(t){return t===k||"object"!==s.type(t)}function r(t){return!(s.isFunction(t)||t&&t.attr||t.length||"object"===s.type(t)&&(t.jquery||t.then))}
// Option object sanitizer
function a(t){var e,i,o,a;
// DEPRECATED - Old content.ajax plugin functionality
// Converts it into the proper Deferred syntax
// Sanitize plugin options
return n(t)?I:(n(t.metadata)&&(t.metadata={type:t.metadata}),"content"in t&&(e=t.content,n(e)||e.jquery||e.done?e=t.content={text:i=r(e)?I:e}:i=e.text,"ajax"in e&&(o=e.ajax,a=o&&o.once!==I,delete e.ajax,e.text=function(t,e){var n=i||s(this).attr(e.options.content.attr)||"Loading...",r=s.ajax(s.extend({},o,{context:e})).then(o.success,k,o.error).then(function(t){return t&&a&&e.set("content.text",t),t},function(t,i,s){e.destroyed||0===t.status||e.set("content.text",i+": "+s)});return a?n:(e.set("content.text",n),r)}),"title"in e&&(s.isPlainObject(e.title)&&(e.button=e.title.button,e.title=e.title.text),r(e.title||I)&&(e.title=I))),"position"in t&&n(t.position)&&(t.position={my:t.position,at:t.position}),"show"in t&&n(t.show)&&(t.show=t.show.jquery?{target:t.show}:t.show===W?{ready:W}:{event:t.show}),"hide"in t&&n(t.hide)&&(t.hide=t.hide.jquery?{target:t.hide}:{event:t.hide}),"style"in t&&n(t.style)&&(t.style={classes:t.style}),s.each(V,function(){this.sanitize&&this.sanitize(t)}),t)}
// Dot notation converter
function h(t,e){
// Loop through
for(var i,s=0,o=t,
// Split notation into array
n=e.split(".");o=o[n[s++]];)s<n.length&&(i=o);return[i||t,n.pop()]}function l(t,e){var i,s,o;for(i in this.checks)for(s in this.checks[i])(o=new RegExp(s,"i").exec(t))&&(e.push(o),("builtin"===i||this.plugins[i])&&this.checks[i][s].apply(this.plugins[i]||this,e))}// Widget class creator
function c(t){return Y.concat("").join(t?"-"+t+" ":" ")}function d(t,e){
// If tooltip has displayed, start hide timer
// If tooltip has displayed, start hide timer
return e>0?setTimeout(s.proxy(t,this),e):void t.call(this)}function p(t){this.tooltip.hasClass(tt)||(
// Clear hide timers
clearTimeout(this.timers.show),clearTimeout(this.timers.hide),
// Start show timer
this.timers.show=d.call(this,function(){this.toggle(W,t)},this.options.show.delay))}function u(t){if(!this.tooltip.hasClass(tt)&&!this.destroyed){
// Check if new target was actually the tooltip element
var e=s(t.relatedTarget),i=e.closest(G)[0]===this.tooltip[0],o=e[0]===this.options.show.target[0];
// Prevent hiding if tooltip is fixed and event target is the tooltip.
// Or if mouse positioning is enabled and cursor momentarily overlaps
if(
// Clear timers and stop animation queue
clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==e[0]&&"mouse"===this.options.position.target&&i||this.options.hide.fixed&&/mouse(out|leave|move)/.test(t.type)&&(i||o))try{t.preventDefault(),t.stopImmediatePropagation()}catch(n){}else
// If tooltip has displayed, start hide timer
this.timers.hide=d.call(this,function(){this.toggle(I,t)},this.options.hide.delay,this)}}function f(t){!this.tooltip.hasClass(tt)&&this.options.hide.inactive&&(
// Clear timer
clearTimeout(this.timers.inactive),this.timers.inactive=d.call(this,function(){this.hide(t)},this.options.hide.inactive))}function g(t){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}
// Global delegation helper
function m(t,i,o){s(e.body).delegate(t,(i.split?i:i.join("."+R+" "))+"."+R,function(){var t=q.api[s.attr(this,X)];t&&!t.disabled&&o.apply(t,arguments)})}// Initialization method
function v(t,i,n){var r,h,l,c,d,
// Setup element references
p=s(e.body),
// Use document body instead of document element if needed
u=t[0]===e?p:t,
// Grab metadata from element if plugin is present
f=t.metadata?t.metadata(n.metadata):k,
// If metadata type if HTML5, grab 'name' from the object instead, or use the regular data object otherwise
g="html5"===n.metadata.type&&f?f[n.metadata.name]:k,
// Grab data from metadata.name (or data-qtipopts as fallback) using .data() method,
m=t.data(n.metadata.name||"qtipopts");
// If we don't get an object returned attempt to parse it manualyl without parseJSON
try{m="string"==typeof m?s.parseJSON(m):m}catch(v){}
// Setup missing content if none is detected
if(
// Merge in and sanitize metadata
c=s.extend(W,{},q.defaults,n,"object"==typeof m?a(m):k,a(g||f)),
// Re-grab our positioning options now we've merged our metadata and set id to passed value
h=c.position,c.id=i,"boolean"==typeof c.content.text){
// Grab from supplied attribute if available
if(l=t.attr(c.content.attr),c.content.attr===I||!l)return I;c.content.text=l}
// Destroy previous tooltip if overwrite is enabled, or skip element if not
if(
// Setup target options
h.container.length||(h.container=p),h.target===I&&(h.target=u),c.show.target===I&&(c.show.target=u),c.show.solo===W&&(c.show.solo=h.container.closest("body")),c.hide.target===I&&(c.hide.target=u),c.position.viewport===W&&(c.position.viewport=h.container),
// Ensure we only use a single container
h.container=h.container.eq(0),
// Convert position corner values into x and y strings
h.at=new j(h.at,W),h.my=new j(h.my),t.data(R))if(c.overwrite)t.qtip("destroy",!0);else if(c.overwrite===I)return I;
// Add has-qtip attribute
// Remove title attribute and store it if present
// Final attr call fixes event delegatiom and IE default tooltip showing problem
// Initialize the tooltip and add API reference
return t.attr(H,i),c.suppress&&(d=t.attr("title"))&&t.removeAttr("title").attr(it,d).attr("title",""),r=new o(t,c,i,!!l),t.data(R,r),r}
// Camel-case method, taken from jQuery source
// http://code.jquery.com/jquery-1.8.0.js
function y(t){return t.charAt(0).toUpperCase()+t.slice(1)}function b(t,e){var s,o,n=e.charAt(0).toUpperCase()+e.slice(1),r=(e+" "+vt.join(n+" ")+n).split(" "),a=0;
// If the property has already been mapped...
if(mt[e])return t.css(mt[e]);for(;s=r[a++];)if((o=t.css(s))!==i)return mt[e]=s,o}
// Parse a given elements CSS property into an int
function w(t,e){return Math.ceil(parseFloat(b(t,e)))}function _(t,e){this._ns="tip",this.options=e,this.offset=e.offset,this.size=[e.width,e.height],
// Initialize
this.init(this.qtip=t)}function x(t,e){this.options=e,this._ns="-modal",this.init(this.qtip=t)}function C(t,e){this._ns="ie6",this.init(this.qtip=t)}// Munge the primitives - Paul Irish tip
var
// Shortcut vars
q,T,j,z,M,W=!0,I=!1,k=null,
// Common variables
E="x",S="y",A="width",L="height",
// Positioning sides
P="top",D="left",B="bottom",F="right",N="center",O="flipinvert",$="shift",V={},R="qtip",H="data-hasqtip",X="data-qtip-id",Y=["ui-widget","ui-tooltip"],G="."+R,U="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),Q=R+"-fixed",J=R+"-default",K=R+"-focus",Z=R+"-hover",tt=R+"-disabled",et="_replacedByqTip",it="oldtitle",
// Browser detection
st={/*
	 * IE version detection
	 *
	 * Adapted from: http://ajaxian.com/archives/attack-of-the-ie-conditional-comment
	 * Credit to James Padolsey for the original implemntation!
	 */
ie:function(){for(var t=4,i=e.createElement("div");(i.innerHTML="<!--[if gt IE "+t+"]><i></i><![endif]-->")&&i.getElementsByTagName("i")[0];t+=1);return t>4?t:NaN}(),/*
	 * iOS version detection
	 */
iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||I};T=o.prototype,T._when=function(t){return s.when.apply(s,t)},T.render=function(t){if(this.rendered||this.destroyed)return this;// If tooltip has already been rendered, exit
var e,i=this,o=this.options,n=this.cache,r=this.elements,a=o.content.text,h=o.content.title,l=o.content.button,c=o.position,d=("."+this._id+" ",[]);
// Add ARIA attributes to target
// Create public position object that tracks current position corners
// Create tooltip element
// Create content element
// Set rendered flag and prevent redundant reposition calls for now
// Create title...
// Update title only if its not a callback (called in toggle if so)
// Create button
// Set proper rendered flag and update content if not a callback function (called in toggle)
// Setup widget classes
// Initialize 'render' plugins
// Unassign initial events and assign proper events
// When deferreds have completed
// Expose API
return s.attr(this.target[0],"aria-describedby",this._id),n.posClass=this._createPosClass((this.position={my:c.my,at:c.at}).my),this.tooltip=r.tooltip=e=s("<div/>",{id:this._id,"class":[R,J,o.style.classes,n.posClass].join(" "),width:o.style.width||"",height:o.style.height||"",tracking:"mouse"===c.target&&c.adjust.mouse,/* ARIA specific attributes */
role:"alert","aria-live":"polite","aria-atomic":I,"aria-describedby":this._id+"-content","aria-hidden":W}).toggleClass(tt,this.disabled).attr(X,this.id).data(R,this).appendTo(c.container).append(r.content=s("<div />",{"class":R+"-content",id:this._id+"-content","aria-atomic":W})),this.rendered=-1,this.positioning=W,h&&(this._createTitle(),s.isFunction(h)||d.push(this._updateTitle(h,I))),l&&this._createButton(),s.isFunction(a)||d.push(this._updateContent(a,I)),this.rendered=W,this._setWidget(),s.each(V,function(t){var e;"render"===this.initialize&&(e=this(i))&&(i.plugins[t]=e)}),this._unassignEvents(),this._assignEvents(),this._when(d).then(function(){
// tooltiprender event
i._trigger("render"),
// Reset flags
i.positioning=I,
// Show tooltip if not hidden during wait period
i.hiddenDuringWait||!o.show.ready&&!t||i.toggle(W,n.event,I),i.hiddenDuringWait=I}),q.api[this.id]=this,this},T.destroy=function(t){function e(){if(!this.destroyed){this.destroyed=W;var t,e=this.target,i=e.attr(it);
// Destroy tooltip if rendered
this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),
// Destroy all plugins
s.each(this.plugins,function(t){this.destroy&&this.destroy()});
// Clear timers
for(t in this.timers)clearTimeout(this.timers[t]);
// Remove api object and ARIA attributes
e.removeData(R).removeAttr(X).removeAttr(H).removeAttr("aria-describedby"),
// Reset old title attribute if removed
this.options.suppress&&i&&e.attr("title",i).removeAttr(it),
// Remove qTip events associated with this API
this._unassignEvents(),
// Remove ID from used id objects, and delete object references
// for better garbage collection and leak protection
this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=k,
// Delete epoxsed API object
delete q.api[this.id]}}
// Set flag the signify destroy is taking place to plugins
// and ensure it only gets destroyed once!
// Set flag the signify destroy is taking place to plugins
// and ensure it only gets destroyed once!
// If an immediate destory is needed
return this.destroyed?this.target:(t===W&&"hide"!==this.triggering||!this.rendered?e.call(this):(this.tooltip.one("tooltiphidden",s.proxy(e,this)),!this.triggering&&this.hide()),this.target)},
// Setup builtin .set() option checks
z=T.checks={builtin:{
// Core checks
"^id$":function(t,e,i,o){var n=i===W?q.nextid:i,r=R+"-"+n;n!==I&&n.length>0&&!s("#"+r).length?(this._id=r,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):t[e]=o},"^prerender":function(t,e,i){i&&!this.rendered&&this.render(this.options.show.ready)},
// Content checks
"^content.text$":function(t,e,i){this._updateContent(i)},"^content.attr$":function(t,e,i,s){this.options.content.text===this.target.attr(s)&&this._updateContent(this.target.attr(i))},"^content.title$":function(t,e,i){
// Remove title if content is null
// Remove title if content is null
// If title isn't already created, create it now and update
return i?(i&&!this.elements.title&&this._createTitle(),void this._updateTitle(i)):this._removeTitle()},"^content.button$":function(t,e,i){this._updateButton(i)},"^content.title.(text|button)$":function(t,e,i){this.set("content."+e,i)},
// Position checks
"^position.(my|at)$":function(t,e,i){"string"==typeof i&&(this.position[e]=t[e]=new j(i,"at"===e))},"^position.container$":function(t,e,i){this.rendered&&this.tooltip.appendTo(i)},
// Show checks
"^show.ready$":function(t,e,i){i&&(!this.rendered&&this.render(W)||this.toggle(W))},
// Style checks
"^style.classes$":function(t,e,i,s){this.rendered&&this.tooltip.removeClass(s).addClass(i)},"^style.(width|height)":function(t,e,i){this.rendered&&this.tooltip.css(e,i)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(t,e,i){this.rendered&&this.tooltip.toggleClass(J,!!i)},
// Events check
"^events.(render|show|move|hide|focus|blur)$":function(t,e,i){this.rendered&&this.tooltip[(s.isFunction(i)?"":"un")+"bind"]("tooltip"+e,i)},
// Properties which require event reassignment
"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){
// Set tracking flag
var t=this.options.position;this.tooltip.attr("tracking","mouse"===t.target&&t.adjust.mouse),
// Reassign events
this._unassignEvents(),this._assignEvents()}}}},T.get=function(t){if(this.destroyed)return this;var e=h(this.options,t.toLowerCase()),i=e[0][e[1]];return i.precedance?i.string():i};var ot=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,nt=/^prerender|show\.ready/i;T.set=function(t,e){if(this.destroyed)return this;var i,o=this.rendered,n=I,r=this.options;this.checks;
// Convert singular option/value pair into object form
// Set all of the defined options to their new values
// Re-sanitize options
/*
	 * Execute any valid callbacks for the set options
	 * Also set positioning flag so we don't get loads of redundant repositioning calls.
	 */
// Update position if needed
return"string"==typeof t?(i=t,t={},t[i]=e):t=s.extend({},t),s.each(t,function(e,i){if(o&&nt.test(e))return void delete t[e];
// Set new obj value
var a,l=h(r,e.toLowerCase());a=l[0][l[1]],l[0][l[1]]=i&&i.nodeType?s(i):i,
// Also check if we need to reposition
n=ot.test(e)||n,
// Set the new params for the callback
t[e]=[l[0],l[1],i,a]}),a(r),this.positioning=W,s.each(t,s.proxy(l,this)),this.positioning=I,this.rendered&&this.tooltip[0].offsetWidth>0&&n&&this.reposition("mouse"===r.position.target?k:this.cache.event),this},T._update=function(t,e,i){var o=this,n=this.cache;
// Make sure tooltip is rendered and content is defined. If not return
// Make sure tooltip is rendered and content is defined. If not return
// Use function to parse content
// Handle deferred content
// If content is null... return false
// Append new content if its a DOM array and show it if hidden
return this.rendered&&t?(s.isFunction(t)&&(t=t.call(this.elements.target,n.event,this)||""),s.isFunction(t.then)?(n.waiting=W,t.then(function(t){return n.waiting=I,o._update(t,e)},k,function(t){return o._update(t,e)})):t===I||!t&&""!==t?I:(t.jquery&&t.length>0?e.empty().append(t.css({display:"block",visibility:"visible"})):e.html(t),this._waitForContent(e).then(function(t){o.rendered&&o.tooltip[0].offsetWidth>0&&o.reposition(n.event,!t.length)}))):I},T._waitForContent=function(t){var e=this.cache;
// If imagesLoaded is included, ensure images have loaded and return promise
// Set flag
return e.waiting=W,(s.fn.imagesLoaded?t.imagesLoaded():s.Deferred().resolve([])).done(function(){e.waiting=I}).promise()},T._updateContent=function(t,e){this._update(t,this.elements.content,e)},T._updateTitle=function(t,e){this._update(t,this.elements.title,e)===I&&this._removeTitle(I)},T._createTitle=function(){var t=this.elements,e=this._id+"-title";
// Destroy previous title element, if present
t.titlebar&&this._removeTitle(),
// Create title bar and title elements
t.titlebar=s("<div />",{"class":R+"-titlebar "+(this.options.style.widget?c("header"):"")}).append(t.title=s("<div />",{id:e,"class":R+"-title","aria-atomic":W})).insertBefore(t.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(t){s(this).toggleClass("ui-state-active ui-state-focus","down"===t.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(t){s(this).toggleClass("ui-state-hover","mouseover"===t.type)}),
// Create button if enabled
this.options.content.button&&this._createButton()},T._removeTitle=function(t){var e=this.elements;e.title&&(e.titlebar.remove(),e.titlebar=e.title=e.button=k,
// Reposition if enabled
t!==I&&this.reposition())},T._createPosClass=function(t){return R+"-pos-"+(t||this.options.position.my).abbrev()},T.reposition=function(i,o){if(!this.rendered||this.positioning||this.destroyed)return this;
// Set positioning flag
this.positioning=W;var n,r,a,h,l=this.cache,c=this.tooltip,d=this.options.position,p=d.target,u=d.my,f=d.at,g=d.viewport,m=d.container,v=d.adjust,y=v.method.split(" "),b=c.outerWidth(I),w=c.outerHeight(I),_=0,x=0,C=c.css("position"),q={left:0,top:0},T=c[0].offsetWidth>0,j=i&&"scroll"===i.type,z=s(t),M=m[0].ownerDocument,k=this.mouse;
// Check if absolute position was passed
if(s.isArray(p)&&2===p.length)
// Force left top and set position
f={x:D,y:P},q={left:p[0],top:p[1]};else if("mouse"===p)
// Force left top to allow flipping
f={x:D,y:P},
// Use the mouse origin that caused the show event, if distance hiding is enabled
(!v.mouse||this.options.hide.distance)&&l.origin&&l.origin.pageX?i=l.origin:!i||i&&("resize"===i.type||"scroll"===i.type)?i=l.event:k&&k.pageX&&(i=k),
// Calculate body and container offset and take them into account below
"static"!==C&&(q=m.offset()),M.body.offsetWidth!==(t.innerWidth||M.documentElement.clientWidth)&&(r=s(e.body).offset()),
// Use event coordinates for position
q={left:i.pageX-q.left+(r&&r.left||0),top:i.pageY-q.top+(r&&r.top||0)},
// Scroll events are a pain, some browsers
v.mouse&&j&&k&&(q.left-=(k.scrollX||0)-z.scrollLeft(),q.top-=(k.scrollY||0)-z.scrollTop());else{if(
// Check if event targetting is being used
"event"===p?i&&i.target&&"scroll"!==i.type&&"resize"!==i.type?l.target=s(i.target):i.target||(l.target=this.elements.target):"event"!==p&&(l.target=s(p.jquery?p:this.elements.target)),p=l.target,
// Parse the target into a jQuery object and make sure there's an element present
p=s(p).eq(0),0===p.length)return this;p[0]===e||p[0]===t?(_=st.iOS?t.innerWidth:p.width(),x=st.iOS?t.innerHeight:p.height(),p[0]===t&&(q={top:(g||p).scrollTop(),left:(g||p).scrollLeft()})):V.imagemap&&p.is("area")?n=V.imagemap(this,p,f,V.viewport?y:I):V.svg&&p&&p[0].ownerSVGElement?n=V.svg(this,p,f,V.viewport?y:I):(_=p.outerWidth(I),x=p.outerHeight(I),q=p.offset()),
// Parse returned plugin values into proper variables
n&&(_=n.width,x=n.height,r=n.offset,q=n.position),
// Adjust position to take into account offset parents
q=this.reposition.offset(p,q,m),
// Adjust for position.fixed tooltips (and also iOS scroll bug in v3.2-4.0 & v4.3-4.3.2)
(st.iOS>3.1&&st.iOS<4.1||st.iOS>=4.3&&st.iOS<4.33||!st.iOS&&"fixed"===C)&&(q.left-=z.scrollLeft(),q.top-=z.scrollTop()),
// Adjust position relative to target
(!n||n&&n.adjustable!==I)&&(q.left+=f.x===F?_:f.x===N?_/2:0,q.top+=f.y===B?x:f.y===N?x/2:0)}
// tooltipmove event
// Adjust position relative to tooltip
// Use viewport adjustment plugin if enabled
// Apply offsets supplied by positioning plugin (if used)
// Apply any new 'my' position
// Set tooltip position class if it's changed
// tooltipmove event
// If effect is disabled, target it mouse, no animation is defined or positioning gives NaN out, set CSS directly
// Set positioning flag
return q.left+=v.x+(u.x===F?-b:u.x===N?-b/2:0),q.top+=v.y+(u.y===B?-w:u.y===N?-w/2:0),V.viewport?(a=q.adjusted=V.viewport(this,q,d,_,x,b,w),r&&a.left&&(q.left+=r.left),r&&a.top&&(q.top+=r.top),a.my&&(this.position.my=a.my)):q.adjusted={left:0,top:0},l.posClass!==(h=this._createPosClass(this.position.my))&&c.removeClass(l.posClass).addClass(l.posClass=h),this._trigger("move",[q,g.elem||g],i)?(delete q.adjusted,o===I||!T||isNaN(q.left)||isNaN(q.top)||"mouse"===p||!s.isFunction(d.effect)?c.css(q):s.isFunction(d.effect)&&(d.effect.call(c,this,s.extend({},q)),c.queue(function(t){
// Reset attributes to avoid cross-browser rendering bugs
s(this).css({opacity:"",height:""}),st.ie&&this.style.removeAttribute("filter"),t()})),this.positioning=I,this):this},
// Custom (more correct for qTip!) offset calculator
T.reposition.offset=function(t,i,o){function n(t,e){i.left+=e*t.scrollLeft(),i.top+=e*t.scrollTop()}if(!o[0])return i;var r,a,h,l,c=s(t[0].ownerDocument),d=!!st.ie&&"CSS1Compat"!==e.compatMode,p=o[0];
// Compensate for non-static containers offset
do"static"!==(a=s.css(p,"position"))&&("fixed"===a?(h=p.getBoundingClientRect(),n(c,-1)):(h=s(p).position(),h.left+=parseFloat(s.css(p,"borderLeftWidth"))||0,h.top+=parseFloat(s.css(p,"borderTopWidth"))||0),i.left-=h.left+(parseFloat(s.css(p,"marginLeft"))||0),i.top-=h.top+(parseFloat(s.css(p,"marginTop"))||0),
// If this is the first parent element with an overflow of "scroll" or "auto", store it
r||"hidden"===(l=s.css(p,"overflow"))||"visible"===l||(r=s(p)));while(p=p.offsetParent);
// Compensate for containers scroll if it also has an offsetParent (or in IE quirks mode)
return r&&(r[0]!==c[0]||d)&&n(r,1),i};
// Corner class
var rt=(j=T.reposition.Corner=function(t,e){t=(""+t).replace(/([A-Z])/," $1").replace(/middle/gi,N).toLowerCase(),this.x=(t.match(/left|right/i)||t.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(t.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!e;var i=t.charAt(0);this.precedance="t"===i||"b"===i?S:E}).prototype;rt.invert=function(t,e){this[t]=this[t]===D?F:this[t]===F?D:e||this[t]},rt.string=function(t){var e=this.x,i=this.y,s=e!==i?"center"===e||"center"!==i&&(this.precedance===S||this.forceY)?[i,e]:[e,i]:[e];return t!==!1?s.join(" "):s},rt.abbrev=function(){var t=this.string(!1);return t[0].charAt(0)+(t[1]&&t[1].charAt(0)||"")},rt.clone=function(){return new j(this.string(),this.forceY)},T.toggle=function(t,i){var o=this.cache,n=this.options,r=this.tooltip;
// Try to prevent flickering when tooltip overlaps show element
if(i){if(/over|enter/.test(i.type)&&o.event&&/out|leave/.test(o.event.type)&&n.show.target.add(i.target).length===n.show.target.length&&r.has(i.relatedTarget).length)return this;
// Cache event
o.event=s.event.fix(i)}
// Render the tooltip if showing and it isn't already
if(
// If we're currently waiting and we've just hidden... stop it
this.waiting&&!t&&(this.hiddenDuringWait=W),!this.rendered)return t?this.render(1):this;if(this.destroyed||this.disabled)return this;var a,h,l,c=t?"show":"hide",d=this.options[c],p=(this.options[t?"hide":"show"],this.options.position),u=this.options.content,f=this.tooltip.css("width"),g=this.tooltip.is(":visible"),m=t||1===d.target.length,v=!i||d.target.length<2||o.target[0]===i.target;
// Check to make sure the tooltip wasn't destroyed in the callback
// Detect state if valid one isn't provided
// Check if the tooltip is in an identical state to the new would-be state
// Fire tooltip(show/hide) event and check if destroyed
// Check to make sure the tooltip wasn't destroyed in the callback
// If the user didn't stop the method prematurely and we're showing the tooltip, focus it
// If the state hasn't changed or the user stopped it, return early
// Set ARIA hidden attribute
// Execute state specific properties
// Store show origin coordinates
// Update tooltip content & title if it's a dynamic function
// Cache mousemove events for positioning purposes (if not already tracking)
// Update the tooltip position (set width first to prevent viewport/max-width issues)
// Hide other tooltips if tooltip is solo
// Clear show timer if we're hiding
// Remove cached origin on hide
// Remove mouse tracking event if not needed (all tracking qTips are hidden)
// Blur the tooltip
// Define post-animation, state specific properties
// If no effect type is supplied, use a simple toggle
// If inactive hide method is set, active it
return(typeof t).search("boolean|number")&&(t=!g),a=!r.is(":animated")&&g===t&&v,h=a?k:!!this._trigger(c,[90]),this.destroyed?this:(h!==I&&t&&this.focus(i),!h||a?this:(s.attr(r[0],"aria-hidden",!t),t?(this.mouse&&(o.origin=s.event.fix(this.mouse)),s.isFunction(u.text)&&this._updateContent(u.text,I),s.isFunction(u.title)&&this._updateTitle(u.title,I),!M&&"mouse"===p.target&&p.adjust.mouse&&(s(e).bind("mousemove."+R,this._storeMouse),M=W),f||r.css("width",r.outerWidth(I)),this.reposition(i,arguments[2]),f||r.css("width",""),d.solo&&("string"==typeof d.solo?s(d.solo):s(G,d.solo)).not(r).not(d.target).qtip("hide",s.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete o.origin,M&&!s(G+'[tracking="true"]:visible',d.solo).not(r).length&&(s(e).unbind("mousemove."+R),M=I),this.blur(i)),l=s.proxy(function(){t?(
// Prevent antialias from disappearing in IE by removing filter
st.ie&&r[0].style.removeAttribute("filter"),
// Remove overflow setting to prevent tip bugs
r.css("overflow",""),
// Autofocus elements if enabled
"string"==typeof d.autofocus&&s(this.options.show.autofocus,r).focus(),
// If set, hide tooltip when inactive for delay period
this.options.show.target.trigger("qtip-"+this.id+"-inactive")):
// Reset CSS states
r.css({display:"",visibility:"",opacity:"",left:"",top:""}),
// tooltipvisible/tooltiphidden events
this._trigger(t?"visible":"hidden")},this),d.effect===I||m===I?(r[c](),l()):s.isFunction(d.effect)?(r.stop(1,1),d.effect.call(r,this),r.queue("fx",function(t){l(),t()})):r.fadeTo(90,t?1:0,l),t&&d.target.trigger("qtip-"+this.id+"-inactive"),this))},T.show=function(t){return this.toggle(W,t)},T.hide=function(t){return this.toggle(I,t)},T.focus=function(t){if(!this.rendered||this.destroyed)return this;var e=s(G),i=this.tooltip,o=parseInt(i[0].style.zIndex,10),n=q.zindex+e.length;
// Only update the z-index if it has changed and tooltip is not already focused
// tooltipfocus event
// Only update z-index's if they've changed
// Reduce our z-index's and keep them properly ordered
// Fire blur event for focused tooltip
// Set the new z-index
return i.hasClass(K)||this._trigger("focus",[n],t)&&(o!==n&&(e.each(function(){this.style.zIndex>o&&(this.style.zIndex=this.style.zIndex-1)}),e.filter("."+K).qtip("blur",t)),i.addClass(K)[0].style.zIndex=n),this},T.blur=function(t){
// Set focused status to FALSE
// tooltipblur event
return!this.rendered||this.destroyed?this:(this.tooltip.removeClass(K),this._trigger("blur",[this.tooltip.css("zIndex")],t),this)},T.disable=function(t){
// If 'toggle' is passed, toggle the current state
return this.destroyed?this:("toggle"===t?t=!(this.rendered?this.tooltip.hasClass(tt):this.disabled):"boolean"!=typeof t&&(t=W),this.rendered&&this.tooltip.toggleClass(tt,t).attr("aria-disabled",t),this.disabled=!!t,this)},T.enable=function(){return this.disable(I)},T._createButton=function(){var t=this,e=this.elements,i=e.tooltip,o=this.options.content.button,n="string"==typeof o,r=n?o:"Close tooltip";e.button&&e.button.remove(),
// Use custom button if one was supplied by user, else use default
o.jquery?e.button=o:e.button=s("<a />",{"class":"qtip-close "+(this.options.style.widget?"":R+"-icon"),title:r,"aria-label":r}).prepend(s("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),
// Create button and setup attributes
e.button.appendTo(e.titlebar||i).attr("role","button").click(function(e){return i.hasClass(tt)||t.hide(e),I})},T._updateButton=function(t){
// Make sure tooltip is rendered and if not, return
if(!this.rendered)return I;var e=this.elements.button;t?this._createButton():e.remove()},
// Widget class setter method
T._setWidget=function(){var t=this.options.style.widget,e=this.elements,i=e.tooltip,s=i.hasClass(tt);i.removeClass(tt),tt=t?"ui-state-disabled":"qtip-disabled",i.toggleClass(tt,s),i.toggleClass("ui-helper-reset "+c(),t).toggleClass(J,this.options.style.def&&!t),e.content&&e.content.toggleClass(c("content"),t),e.titlebar&&e.titlebar.toggleClass(c("header"),t),e.button&&e.button.toggleClass(R+"-icon",!t)},
// Store mouse coordinates
T._storeMouse=function(t){return(this.mouse=s.event.fix(t)).type="mousemove",this},
// Bind events
T._bind=function(t,e,i,o,n){if(t&&i&&e.length){var r="."+this._id+(o?"-"+o:"");return s(t).bind((e.split?e:e.join(r+" "))+r,s.proxy(i,n||this)),this}},T._unbind=function(t,e){return t&&s(t).unbind("."+this._id+(e?"-"+e:"")),this},
// Event trigger
T._trigger=function(t,e,i){var o=s.Event("tooltip"+t);return o.originalEvent=i&&s.extend({},i)||this.cache.event||k,this.triggering=t,this.tooltip.trigger(o,[this].concat(e||[])),this.triggering=I,!o.isDefaultPrevented()},T._bindEvents=function(t,e,i,o,n,r){
// Get tasrgets that lye within both
var a=i.filter(o).add(o.filter(i)),h=[];
// If hide and show targets are the same...
a.length&&(
// Filter identical show/hide events
s.each(e,function(e,i){var o=s.inArray(i,t);
// Both events are identical, remove from both hide and show events
// and append to toggleEvents
o>-1&&h.push(t.splice(o,1)[0])}),
// Toggle events are special case of identical show/hide events, which happen in sequence
h.length&&(
// Bind toggle events to the similar targets
this._bind(a,h,function(t){var e=this.rendered?this.tooltip[0].offsetWidth>0:!1;(e?r:n).call(this,t)}),
// Remove the similar targets from the regular show/hide bindings
i=i.not(a),o=o.not(a))),
// Apply show/hide/toggle events
this._bind(i,t,n),this._bind(o,e,r)},T._assignInitialEvents=function(t){
// Define hoverIntent function
function e(t){
// Only continue if tooltip isn't disabled
// Only continue if tooltip isn't disabled
// Cache the event data
// Start the event sequence
return this.disabled||this.destroyed?I:(this.cache.event=t&&s.event.fix(t),this.cache.target=t&&s(t.target),clearTimeout(this.timers.show),void(this.timers.show=d.call(this,function(){this.render("object"==typeof t||i.show.ready)},i.prerender?0:i.show.delay)))}var i=this.options,o=i.show.target,n=i.hide.target,r=i.show.event?s.trim(""+i.show.event).split(" "):[],a=i.hide.event?s.trim(""+i.hide.event).split(" "):[];
// Catch remove/removeqtip events on target element to destroy redundant tooltips
this._bind(this.elements.target,["remove","removeqtip"],function(t){this.destroy(!0)},"destroy"),/*
	 * Make sure hoverIntent functions properly by using mouseleave as a hide event if
	 * mouseenter/mouseout is used for show.event, even if it isn't in the users options.
	 */
/mouse(over|enter)/i.test(i.show.event)&&!/mouse(out|leave)/i.test(i.hide.event)&&a.push("mouseleave"),/*
	 * Also make sure initial mouse targetting works correctly by caching mousemove coords
	 * on show targets before the tooltip has rendered. Also set onTarget when triggered to
	 * keep mouse tracking working.
	 */
this._bind(o,"mousemove",function(t){this._storeMouse(t),this.cache.onTarget=W}),
// Filter and bind events
this._bindEvents(r,a,o,n,e,function(){return this.timers?void clearTimeout(this.timers.show):I}),
// Prerendering is enabled, create tooltip now
(i.show.ready||i.prerender)&&e.call(this,t)},
// Event assignment method
T._assignEvents=function(){var i=this,o=this.options,n=o.position,r=this.tooltip,a=o.show.target,h=o.hide.target,l=n.container,c=n.viewport,d=s(e),m=(s(e.body),s(t)),v=o.show.event?s.trim(""+o.show.event).split(" "):[],y=o.hide.event?s.trim(""+o.hide.event).split(" "):[];
// Assign passed event callbacks
s.each(o.events,function(t,e){i._bind(r,"toggle"===t?["tooltipshow","tooltiphide"]:["tooltip"+t],e,null,r)}),
// Hide tooltips when leaving current window/frame (but not select/option elements)
/mouse(out|leave)/i.test(o.hide.event)&&"window"===o.hide.leave&&this._bind(d,["mouseout","blur"],function(t){/select|option/.test(t.target.nodeName)||t.relatedTarget||this.hide(t)}),
// Enable hide.fixed by adding appropriate class
o.hide.fixed?h=h.add(r.addClass(Q)):/mouse(over|enter)/i.test(o.show.event)&&this._bind(h,"mouseleave",function(){clearTimeout(this.timers.show)}),
// Hide tooltip on document mousedown if unfocus events are enabled
(""+o.hide.event).indexOf("unfocus")>-1&&this._bind(l.closest("html"),["mousedown","touchstart"],function(t){var e=s(t.target),i=this.rendered&&!this.tooltip.hasClass(tt)&&this.tooltip[0].offsetWidth>0,o=e.parents(G).filter(this.tooltip[0]).length>0;e[0]===this.target[0]||e[0]===this.tooltip[0]||o||this.target.has(e[0]).length||!i||this.hide(t)}),
// Check if the tooltip hides when inactive
"number"==typeof o.hide.inactive&&(
// Bind inactive method to show target(s) as a custom event
this._bind(a,"qtip-"+this.id+"-inactive",f,"inactive"),
// Define events which reset the 'inactive' event handler
this._bind(h.add(r),q.inactiveEvents,f)),
// Filter and bind events
this._bindEvents(v,y,a,h,p,u),
// Mouse movement bindings
this._bind(a.add(r),"mousemove",function(t){
// Check if the tooltip hides when mouse is moved a certain distance
if("number"==typeof o.hide.distance){var e=this.cache.origin||{},i=this.options.hide.distance,s=Math.abs;
// Check if the movement has gone beyond the limit, and hide it if so
(s(t.pageX-e.pageX)>=i||s(t.pageY-e.pageY)>=i)&&this.hide(t)}
// Cache mousemove coords on show targets
this._storeMouse(t)}),
// Mouse positioning events
"mouse"===n.target&&n.adjust.mouse&&(
// Apply a mouseleave event so we don't get problems with overlapping
o.hide.event&&
// Track if we're on the target or not
this._bind(a,["mouseenter","mouseleave"],function(t){return this.cache?void(this.cache.onTarget="mouseenter"===t.type):I}),
// Update tooltip position on mousemove
this._bind(d,"mousemove",function(t){
// Update the tooltip position only if the tooltip is visible and adjustment is enabled
this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(tt)&&this.tooltip[0].offsetWidth>0&&this.reposition(t)})),
// Adjust positions of the tooltip on window resize if enabled
(n.adjust.resize||c.length)&&this._bind(s.event.special.resize?c:m,"resize",g),
// Adjust tooltip position on scroll of the window or viewport element if present
n.adjust.scroll&&this._bind(m.add(n.container),"scroll",g)},
// Un-assignment method
T._unassignEvents=function(){var i=this.options,o=i.show.target,n=i.hide.target,r=s.grep([this.elements.target[0],this.rendered&&this.tooltip[0],i.position.container[0],i.position.viewport[0],i.position.container.closest("html")[0],// unfocus
t,e],function(t){return"object"==typeof t});
// Add show and hide targets if they're valid
o&&o.toArray&&(r=r.concat(o.toArray())),n&&n.toArray&&(r=r.concat(n.toArray())),
// Unbind the events
this._unbind(r)._unbind(r,"destroy")._unbind(r,"inactive")},
// Apply common event handlers using delegate (avoids excessive .bind calls!)
s(function(){m(G,["mouseenter","mouseleave"],function(t){var e="mouseenter"===t.type,i=s(t.currentTarget),o=s(t.relatedTarget||t.target),n=this.options;
// On mouseenter...
e?(
// Focus the tooltip on mouseenter (z-index stacking)
this.focus(t),
// Clear hide timer on tooltip hover to prevent it from closing
i.hasClass(Q)&&!i.hasClass(tt)&&clearTimeout(this.timers.hide)):
// When mouse tracking is enabled, hide when we leave the tooltip and not onto the show target (if a hide event is set)
"mouse"===n.position.target&&n.position.adjust.mouse&&n.hide.event&&n.show.target&&!o.closest(n.show.target[0]).length&&this.hide(t),
// Add hover class
i.toggleClass(Z,e)}),
// Define events which reset the 'inactive' event handler
m("["+X+"]",U,f)}),
// jQuery $.fn extension method
q=s.fn.qtip=function(t,e,o){var n=(""+t).toLowerCase(),// Parse command
r=k,h=s.makeArray(arguments).slice(1),l=h[h.length-1],c=this[0]?s.data(this[0],R):k;
// Check for API request
// Check for API request
// Sanitize options first
return!arguments.length&&c||"api"===n?c:"string"==typeof t?(this.each(function(){var t=s.data(this,R);if(!t)return W;
// Check for specific API commands
if(
// Cache the event if possible
l&&l.timeStamp&&(t.cache.event=l),!e||"option"!==n&&"options"!==n)t[n]&&t[n].apply(t,h);else{if(o===i&&!s.isPlainObject(e))return r=t.get(e),I;t.set(e,o)}}),r!==k?r:this):"object"!=typeof t&&arguments.length?void 0:(c=a(s.extend(W,{},t)),this.each(function(t){var e,i;
// Find next available ID, or use custom ID if provided
// Initialize the qTip and re-grab newly sanitized options
// Initialize plugins
// Assign initial pre-render events
return i=s.isArray(c.id)?c.id[t]:c.id,i=!i||i===I||i.length<1||q.api[i]?q.nextid++:i,e=v(s(this),i,c),e===I?W:(q.api[i]=e,s.each(V,function(){"initialize"===this.initialize&&this(e)}),void e._assignInitialEvents(l))}))},
// Expose class
s.qtip=o,
// Populated in render method
q.api={},s.each({/* Allow other plugins to successfully retrieve the title of an element with a qTip applied */
attr:function(t,e){if(this.length){var i=this[0],o="title",n=s.data(i,"qtip");if(t===o&&n&&"object"==typeof n&&n.options.suppress)
// If qTip is rendered and title was originally used as content, update it
return arguments.length<2?s.attr(i,it):(n&&n.options.content.attr===o&&n.cache.attr&&n.set("content.text",e),this.attr(it,e))}return s.fn["attr"+et].apply(this,arguments)},/* Allow clone to correctly retrieve cached title attributes */
clone:function(t){var
// Clone our element using the real clone method
e=(s([]),s.fn["clone"+et].apply(this,arguments));
// Grab all elements with an oldtitle set, and change it to regular title attribute, if keepData is false
return t||e.filter("["+it+"]").attr("title",function(){return s.attr(this,it)}).removeAttr(it),e}},function(t,e){if(!e||s.fn[t+et])return W;var i=s.fn[t+et]=s.fn[t];s.fn[t]=function(){return e.apply(this,arguments)||i.apply(this,arguments)}}),/* Fire off 'removeqtip' handler in $.cleanData if jQuery UI not present (it already does similar).
 * This snippet is taken directly from jQuery UI source code found here:
 *     http://code.jquery.com/ui/jquery-ui-git.js
 */
s.ui||(s["cleanData"+et]=s.cleanData,s.cleanData=function(t){for(var e,i=0;(e=s(t[i])).length;i++)if(e.attr(H))try{e.triggerHandler("removeqtip")}catch(o){}s["cleanData"+et].apply(this,arguments)}),// qTip version
q.version="2.2.1",
// Base ID for all qTips
q.nextid=0,
// Inactive events array
q.inactiveEvents=U,
// Base z-index for all qTips
q.zindex=15e3,
// Define configuration defaults
q.defaults={prerender:I,id:I,overwrite:W,suppress:W,content:{text:W,attr:"title",title:I,button:I},position:{my:"top left",at:"bottom right",target:I,container:I,viewport:I,adjust:{x:0,y:0,mouse:W,scroll:W,resize:W,method:"flipinvert flipinvert"},effect:function(t,e,i){s(this).animate(e,{duration:200,queue:I})}},show:{target:I,event:"mouseenter",effect:W,delay:90,solo:I,ready:I,autofocus:I},hide:{target:I,event:"mouseleave",effect:W,delay:0,fixed:I,inactive:I,leave:"window",distance:I},style:{classes:"",widget:I,width:I,height:I,def:W},events:{render:k,move:k,show:k,hide:k,toggle:k,visible:k,hidden:k,focus:k,blur:k}};var at,
// Common CSS strings
ht="margin",lt="border",ct="color",dt="background-color",pt="transparent",ut=" !important",
// Check if the browser supports <canvas/> elements
ft=!!e.createElement("canvas").getContext,
// Invalid colour values used in parseColours()
gt=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,mt={},vt=["Webkit","O","Moz","ms"];
// VML creation (for IE only)
if(ft)var yt=t.devicePixelRatio||1,bt=function(){var t=e.createElement("canvas").getContext("2d");return t.backingStorePixelRatio||t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}(),wt=yt/bt;else var _t=function(t,e,i){return"<qtipvml:"+t+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(e||"")+' style="behavior: url(#default#VML); '+(i||"")+'" />'};s.extend(_.prototype,{init:function(t){var e,i;
// Create tip element and prepend to the tooltip
i=this.element=t.elements.tip=s("<div />",{"class":R+"-tip"}).prependTo(t.tooltip),
// Create tip drawing element(s)
ft?(
// save() as soon as we create the canvas element so FF2 doesn't bork on our first restore()!
e=s("<canvas />").appendTo(this.element)[0].getContext("2d"),
// Setup constant parameters
e.lineJoin="miter",e.miterLimit=1e5,e.save()):(e=_t("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(e+e),
// Prevent mousing down on the tip since it causes problems with .live() handling in IE due to VML
t._bind(s("*",i).add(i),["click","mousedown"],function(t){t.stopPropagation()},this._ns)),
// Bind update events
t._bind(t.tooltip,"tooltipmove",this.reposition,this._ns,this),
// Create it
this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(t){var e=this.qtip.elements.titlebar;return e&&(t.y===P||t.y===N&&this.element.position().top+this.size[1]/2+this.options.offset<e.outerHeight(W))},_parseCorner:function(t){var e=this.qtip.options.position.my;
// Detect corner and mimic properties
return t===I||e===I?t=I:t===W?t=new j(e.string()):t.string||(t=new j(t),t.fixed=W),t},_parseWidth:function(t,e,i){var s=this.qtip.elements,o=lt+y(e)+"Width";return(i?w(i,o):w(s.content,o)||w(this._useTitle(t)&&s.titlebar||s.content,o)||w(s.tooltip,o))||0},_parseRadius:function(t){var e=this.qtip.elements,i=lt+y(t.y)+y(t.x)+"Radius";return st.ie<9?0:w(this._useTitle(t)&&e.titlebar||e.content,i)||w(e.tooltip,i)||0},_invalidColour:function(t,e,i){var s=t.css(e);return!s||i&&s===t.css(i)||gt.test(s)?I:s},_parseColours:function(t){var e=this.qtip.elements,i=this.element.css("cssText",""),o=lt+y(t[t.precedance])+y(ct),n=this._useTitle(t)&&e.titlebar||e.content,r=this._invalidColour,a=[];
// Attempt to detect the background colour from various elements, left-to-right precedance
// Attempt to detect the correct border side colour from various elements, left-to-right precedance
// Reset background and border colours
return a[0]=r(i,dt)||r(n,dt)||r(e.content,dt)||r(e.tooltip,dt)||i.css(dt),a[1]=r(i,o,ct)||r(n,o,ct)||r(e.content,o,ct)||r(e.tooltip,o,ct)||e.tooltip.css(o),s("*",i).add(i).css("cssText",dt+":"+pt+ut+";"+lt+":0"+ut+";"),a},_calculateSize:function(t){var e,i,s,o=t.precedance===S,n=this.options.width,r=this.options.height,a="c"===t.abbrev(),h=(o?n:r)*(a?.5:1),l=Math.pow,c=Math.round,d=Math.sqrt(l(h,2)+l(r,2)),p=[this.border/h*d,this.border/r*d];return p[2]=Math.sqrt(l(p[0],2)-l(this.border,2)),p[3]=Math.sqrt(l(p[1],2)-l(this.border,2)),e=d+p[2]+p[3]+(a?0:p[0]),i=e/d,s=[c(i*n),c(i*r)],o?s:s.reverse()},
// Tip coordinates calculator
_calculateTip:function(t,e,i){i=i||1,e=e||this.size;var s=e[0]*i,o=e[1]*i,n=Math.ceil(s/2),r=Math.ceil(o/2),
// Define tip coordinates in terms of height and width values
a={br:[0,0,s,o,s,0],bl:[0,0,s,0,0,o],tr:[0,o,s,0,s,o],tl:[0,0,0,o,s,o],tc:[0,o,n,0,s,o],bc:[0,0,s,0,n,o],rc:[0,0,s,r,0,o],lc:[s,0,s,o,0,r]};
// Set common side shapes
return a.lt=a.br,a.rt=a.bl,a.lb=a.tr,a.rb=a.tl,a[t.abbrev()]},
// Tip coordinates drawer (canvas)
_drawCoords:function(t,e){t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.closePath()},create:function(){
// Determine tip corner
var t=this.corner=(ft||st.ie)&&this._parseCorner(this.options.corner);
// If we have a tip corner...
// Cache it
// Create it
// Toggle tip element
return(this.enabled=!!this.corner&&"c"!==this.corner.abbrev())&&(this.qtip.cache.corner=t.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(e,i){if(!this.enabled)return this;var o,n,r,a,h,l,c,d,p=this.qtip.elements,u=this.element,f=u.children(),g=this.options,m=this.size,v=g.mimic,y=Math.round;
// Re-determine tip if not already set
e||(e=this.qtip.cache.corner||this.corner),
// Use corner property if we detect an invalid mimic value
v===I?v=e:(v=new j(v),v.precedance=e.precedance,"inherit"===v.x?v.x=e.x:"inherit"===v.y?v.y=e.y:v.x===v.y&&(v[e.precedance]=e[e.precedance])),n=v.precedance,
// Ensure the tip width.height are relative to the tip position
e.precedance===E?this._swapDimensions():this._resetDimensions(),
// Update our colours
o=this.color=this._parseColours(e),
// Detect border width, taking into account colours
o[1]!==pt?(
// Grab border width
d=this.border=this._parseWidth(e,e[e.precedance]),
// If border width isn't zero, use border color as fill if it's not invalid (1.0 style tips)
g.border&&1>d&&!gt.test(o[1])&&(o[0]=o[1]),
// Set border width (use detected border width if options.border is true)
this.border=d=g.border!==W?g.border:d):this.border=d=0,
// Determine tip size
c=this.size=this._calculateSize(e),u.css({width:c[0],height:c[1],lineHeight:c[1]+"px"}),
// Calculate tip translation
l=e.precedance===S?[y(v.x===D?d:v.x===F?c[0]-m[0]-d:(c[0]-m[0])/2),y(v.y===P?c[1]-m[1]:0)]:[y(v.x===D?c[0]-m[0]:0),y(v.y===P?d:v.y===B?c[1]-m[1]-d:(c[1]-m[1])/2)],
// Canvas drawing implementation
ft?(
// Grab canvas context and clear/save it
r=f[0].getContext("2d"),r.restore(),r.save(),r.clearRect(0,0,6e3,6e3),
// Calculate coordinates
a=this._calculateTip(v,m,wt),h=this._calculateTip(v,this.size,wt),
// Set the canvas size using calculated size
f.attr(A,c[0]*wt).attr(L,c[1]*wt),f.css(A,c[0]).css(L,c[1]),
// Draw the outer-stroke tip
this._drawCoords(r,h),r.fillStyle=o[1],r.fill(),
// Draw the actual tip
r.translate(l[0]*wt,l[1]*wt),this._drawCoords(r,a),r.fillStyle=o[0],r.fill()):(
// Calculate coordinates
a=this._calculateTip(v),
// Setup coordinates string
a="m"+a[0]+","+a[1]+" l"+a[2]+","+a[3]+" "+a[4]+","+a[5]+" xe",
// Setup VML-specific offset for pixel-perfection
l[2]=d&&/^(r|b)/i.test(e.string())?8===st.ie?2:1:0,
// Set initial CSS
f.css({coordsize:c[0]+d+" "+(c[1]+d),antialias:""+(v.string().indexOf(N)>-1),left:l[0]-l[2]*Number(n===E),top:l[1]-l[2]*Number(n===S),width:c[0]+d,height:c[1]+d}).each(function(t){var e=s(this);
// Set shape specific attributes
e[e.prop?"prop":"attr"]({coordsize:c[0]+d+" "+(c[1]+d),path:a,fillcolor:o[0],filled:!!t,stroked:!t}).toggle(!(!d&&!t)),
// Check if border is enabled and add stroke element
!t&&e.html(_t("stroke",'weight="'+2*d+'px" color="'+o[1]+'" miterlimit="1000" joinstyle="miter"'))})),
// Opera bug #357 - Incorrect tip position
// https://github.com/Craga89/qTip2/issues/367
t.opera&&setTimeout(function(){p.tip.css({display:"inline-block",visibility:"visible"})},1),
// Position if needed
i!==I&&this.calculate(e,c)},calculate:function(t,e){if(!this.enabled)return I;var i,o,n=this,r=this.qtip.elements,a=this.element,h=this.options.offset,l=(r.tooltip.hasClass("ui-widget"),{});
// Inherit corner if not provided
// Determine which tip dimension to use for adjustment
// Setup corners and offset array
// Calculate tip position
// Adjust for tip size
// Set and return new position
return t=t||this.corner,i=t.precedance,e=e||this._calculateSize(t),o=[t.x,t.y],i===E&&o.reverse(),s.each(o,function(s,o){var a,c,d;o===N?(a=i===S?D:P,l[a]="50%",l[ht+"-"+a]=-Math.round(e[i===S?0:1]/2)+h):(a=n._parseWidth(t,o,r.tooltip),c=n._parseWidth(t,o,r.content),d=n._parseRadius(t),l[o]=Math.max(-n.border,s?c:h+(d>a?d:-a)))}),l[t[i]]-=e[i===E?0:1],a.css({margin:"",top:"",bottom:"",left:"",right:""}).css(l),l},reposition:function(t,e,s,o){function n(t,e,i,s,o){
// Horizontal - Shift or flip method
t===$&&c.precedance===e&&d[s]&&c[i]!==N?c.precedance=c.precedance===E?S:E:t!==$&&d[s]&&(c[e]=c[e]===N?d[s]>0?s:o:c[e]===s?o:s)}function r(t,e,o){c[t]===N?m[ht+"-"+e]=g[t]=a[ht+"-"+e]-d[e]:(h=a[o]!==i?[d[e],-a[e]]:[-d[e],a[e]],(g[t]=Math.max(h[0],h[1]))>h[0]&&(s[e]-=d[e],g[e]=I),m[a[o]!==i?o:e]=g[t])}if(this.enabled){var a,h,l=e.cache,c=this.corner.clone(),d=s.adjusted,p=e.options.position.adjust.method.split(" "),u=p[0],f=p[1]||p[0],g={left:I,top:I,x:0,y:0},m={};
// If our tip position isn't fixed e.g. doesn't adjust with viewport...
this.corner.fixed!==W&&(
// Perform shift/flip adjustments
n(u,E,S,D,F),n(f,S,E,P,B),
// Update and redraw the tip if needed (check cached details of last drawn tip)
(c.string()!==l.corner.string()||l.cornerTop!==d.top||l.cornerLeft!==d.left)&&this.update(c,I)),
// Setup tip offset properties
a=this.calculate(c),
// Readjust offset object to make it left/top
a.right!==i&&(a.left=-a.right),a.bottom!==i&&(a.top=-a.bottom),a.user=this.offset,
// Perform shift adjustments
(g.left=u===$&&!!d.left)&&r(E,D,F),(g.top=f===$&&!!d.top)&&r(S,P,B),/*
		* If the tip is adjusted in both dimensions, or in a
		* direction that would cause it to be anywhere but the
		* outer border, hide it!
		*/
this.element.css(m).toggle(!(g.x&&g.y||c.x===N&&g.y||c.y===N&&g.x)),
// Adjust position to accomodate tip dimensions
s.left-=a.left.charAt?a.user:u!==$||g.top||!g.left&&!g.top?a.left+this.border:0,s.top-=a.top.charAt?a.user:f!==$||g.left||!g.left&&!g.top?a.top+this.border:0,
// Cache details
l.cornerLeft=d.left,l.cornerTop=d.top,l.corner=c.clone()}},destroy:function(){
// Unbind events
this.qtip._unbind(this.qtip.tooltip,this._ns),
// Remove the tip element(s)
this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),at=V.tip=function(t){return new _(t,t.options.style.tip)},
// Initialize tip on render
at.initialize="render",
// Setup plugin sanitization options
at.sanitize=function(t){if(t.style&&"tip"in t.style){var e=t.style.tip;"object"!=typeof e&&(e=t.style.tip={corner:e}),/string|boolean/i.test(typeof e.corner)||(e.corner=W)}},
// Add new option checks for the plugin
z.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){
// Make sure a tip can be drawn
this.create(),
// Reposition the tooltip
this.qtip.reposition()},"^style.tip.(height|width)$":function(t){
// Re-set dimensions and redraw the tip
this.size=[t.width,t.height],this.update(),
// Reposition the tooltip
this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},
// Extend original qTip defaults
s.extend(W,q.defaults,{style:{tip:{corner:W,mimic:I,width:6,height:6,border:W,offset:0}}});var xt,Ct,qt="qtip-modal",Tt="."+qt;Ct=function(){
// Modified code from jQuery UI 1.10.0 source
// http://code.jquery.com/ui/1.10.0/jquery-ui.js
function t(t){
// Use the defined focusable checker when possible
if(s.expr[":"].focusable)return s.expr[":"].focusable;var e,i,o,n=!isNaN(s.attr(t,"tabindex")),r=t.nodeName&&t.nodeName.toLowerCase();return"area"===r?(e=t.parentNode,i=e.name,t.href&&i&&"map"===e.nodeName.toLowerCase()?(o=s("img[usemap=#"+i+"]")[0],!!o&&o.is(":visible")):!1):/input|select|textarea|button|object/.test(r)?!t.disabled:"a"===r?t.href||n:n}
// Focus inputs using cached focusable elements (see update())
function i(t){
// Blurring body element in IE causes window.open windows to unfocus!
c.length<1&&t.length?t.not("body").blur():c.first().focus()}
// Steal focus from elements outside tooltip
function o(t){if(h.is(":visible")){var e,o=s(t.target),a=n.tooltip,l=o.closest(G);
// Determine if input container target is above this
e=l.length<1?I:parseInt(l[0].style.zIndex,10)>parseInt(a[0].style.zIndex,10),
// If we're showing a modal, but focus has landed on an input below
// this modal, divert focus to the first visible input in this modal
// or if we can't find one... the tooltip itself
e||o.closest(G)[0]===a[0]||i(o),
// Detect when we leave the last focusable element...
r=t.target===c[c.length-1]}}var n,r,a,h,l=this,c={};s.extend(l,{init:function(){
// Create document overlay
// Make sure we can't focus anything outside the tooltip
// Apply keyboard "Escape key" close handler
// Apply click handler for blur option
return h=l.elem=s("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return I}}).hide(),s(e.body).bind("focusin"+Tt,o),s(e).bind("keydown"+Tt,function(t){n&&n.options.show.modal.escape&&27===t.keyCode&&n.hide(t)}),h.bind("click"+Tt,function(t){n&&n.options.show.modal.blur&&n.hide(t)}),l},update:function(e){
// Update current API reference
n=e,
// Update focusable elements if enabled
c=e.options.show.modal.stealfocus!==I?e.tooltip.find("*").filter(function(){return t(this)}):[]},toggle:function(t,o,r){var c=(s(e.body),t.tooltip),d=t.options.show.modal,p=d.effect,u=o?"show":"hide",f=h.is(":visible"),g=s(Tt).filter(":visible:not(:animated)").not(c);
// Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible
// Set active tooltip API reference
// If the modal can steal the focus...
// Blur the current item and focus anything in the modal we an
// Toggle backdrop cursor style on show
// Append to body on show
// Prevent modal from conflicting with show.solo, and don't hide backdrop is other modals are visible
// Stop all animations
// Use custom function if provided
// Reset position and detach from body on hide
// Cache the state
// If the tooltip is destroyed, set reference to null
return l.update(t),o&&d.stealfocus!==I&&i(s(":focus")),h.toggleClass("blurs",d.blur),o&&h.appendTo(e.body),h.is(":animated")&&f===o&&a!==I||!o&&g.length?l:(h.stop(W,I),s.isFunction(p)?p.call(h,o):p===I?h[u]():h.fadeTo(parseInt(r,10)||90,o?1:0,function(){o||h.hide()}),o||h.queue(function(t){h.css({left:"",top:""}),s(Tt).length||h.detach(),t()}),a=o,n.destroyed&&(n=k),l)}}),l.init()},Ct=new Ct,s.extend(x.prototype,{init:function(t){var e=t.tooltip;
// If modal is disabled... return
// If modal is disabled... return
// Set overlay reference
// Add unique attribute so we can grab modal tooltips easily via a SELECTOR, and set z-index
// Apply our show/hide/focus modal events
// Adjust modal z-index on tooltip focus
// Focus any other visible modals when this one hides
return this.options.on?(t.elements.overlay=Ct.elem,e.addClass(qt).css("z-index",q.modal_zindex+s(Tt).length),t._bind(e,["tooltipshow","tooltiphide"],function(t,i,o){var n=t.originalEvent;
// Make sure mouseout doesn't trigger a hide when showing the modal and mousing onto backdrop
if(t.target===e[0])if(n&&"tooltiphide"===t.type&&/mouse(leave|enter)/.test(n.type)&&s(n.relatedTarget).closest(Ct.elem[0]).length)try{t.preventDefault()}catch(r){}else(!n||n&&"tooltipsolo"!==n.type)&&this.toggle(t,"tooltipshow"===t.type,o)},this._ns,this),t._bind(e,"tooltipfocus",function(t,i){
// If focus was cancelled before it reached us, don't do anything
if(!t.isDefaultPrevented()&&t.target===e[0]){var o=s(Tt),
// Keep the modal's lower than other, regular qtips
n=q.modal_zindex+o.length,r=parseInt(e[0].style.zIndex,10);
// Set overlay z-index
Ct.elem[0].style.zIndex=n-1,
// Reduce modal z-index's and keep them properly ordered
o.each(function(){this.style.zIndex>r&&(this.style.zIndex-=1)}),
// Fire blur event for focused tooltip
o.filter("."+K).qtip("blur",t.originalEvent),
// Set the new z-index
e.addClass(K)[0].style.zIndex=n,
// Set current
Ct.update(i);
// Prevent default handling
try{t.preventDefault()}catch(a){}}},this._ns,this),void t._bind(e,"tooltiphide",function(t){t.target===e[0]&&s(Tt).filter(":visible").not(e).last().qtip("focus",t)},this._ns,this)):this},toggle:function(t,e,i){
// Make sure default event hasn't been prevented
// Make sure default event hasn't been prevented
// Toggle it
return t&&t.isDefaultPrevented()?this:void Ct.toggle(this.qtip,!!e,i)},destroy:function(){
// Remove modal class
this.qtip.tooltip.removeClass(qt),
// Remove bound events
this.qtip._unbind(this.qtip.tooltip,this._ns),
// Delete element reference
Ct.toggle(this.qtip,I),delete this.qtip.elements.overlay}}),xt=V.modal=function(t){return new x(t,t.options.show.modal)},
// Setup sanitiztion rules
xt.sanitize=function(t){t.show&&("object"!=typeof t.show.modal?t.show.modal={on:!!t.show.modal}:"undefined"==typeof t.show.modal.on&&(t.show.modal.on=W))},
// Base z-index for all modal tooltips (use qTip core z-index as a base)
q.modal_zindex=q.zindex-200,
// Plugin needs to be initialized on render
xt.initialize="render",
// Setup option set checks
z.modal={"^show.modal.(on|blur)$":function(){
// Initialise
this.destroy(),this.init(),
// Show the modal if not visible already and tooltip is visible
this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},
// Extend original api defaults
s.extend(W,q.defaults,{show:{modal:{on:I,effect:W,blur:W,stealfocus:W,escape:W}}}),V.viewport=function(i,s,o,n,r,a,h){
// Generic calculation method
function l(t,e,i,o,n,r,a,h,l){var c=s[n],y=w[t],b=_[t],x=i===$,C=y===n?l:y===r?-l:-l/2,q=b===n?h:b===r?-h:-h/2,T=m[n]+v[n]-(u?0:p[n]),j=T-c,z=c+l-(a===A?f:g)-T,M=C-(w.precedance===t||y===w[e]?q:0)-(b===N?h/2:0);
// shift
// Adjust position but keep it within viewport dimensions
// Make sure we don't adjust complete off the element when using 'center'
// Update adjustment amount depending on if using flipinvert or flip
// Check for overflow on the left/top
// Make sure we haven't made things worse with the adjustment and reset if so
return x?(M=(y===n?1:-1)*C,s[n]+=j>0?j:z>0?-z:0,s[n]=Math.max(-p[n]+v[n],c-M,Math.min(Math.max(-p[n]+v[n]+(a===A?f:g),c+M),s[n],"center"===y?c-C:1e9))):(o*=i===O?2:0,j>0&&(y!==n||z>0)?(s[n]-=M+o,d.invert(t,n)):z>0&&(y!==r||j>0)&&(s[n]-=(y===N?-M:M)+o,d.invert(t,r)),s[n]<m&&-s[n]>z&&(s[n]=c,d=w.clone())),s[n]-c}var c,d,p,u,f,g,m,v,y=o.target,b=i.elements.tooltip,w=o.my,_=o.at,x=o.adjust,C=x.method.split(" "),q=C[0],T=C[1]||C[0],j=o.viewport,z=o.container,M=(i.cache,{left:0,top:0});
// If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return
// If viewport is not a jQuery element, or it's the window/document, or no adjustment method is used... return
// Cach container details
// Cache our viewport details
// Set newMy if using flip or flipinvert methods
// Adjust position based onviewport and adjustment options
return j.jquery&&y[0]!==t&&y[0]!==e.body&&"none"!==x.method?(p=z.offset()||M,u="static"===z.css("position"),c="fixed"===b.css("position"),f=j[0]===t?j.width():j.outerWidth(I),g=j[0]===t?j.height():j.outerHeight(I),m={left:c?0:j.scrollLeft(),top:c?0:j.scrollTop()},v=j.offset()||M,("shift"!==q||"shift"!==T)&&(d=w.clone()),M={left:"none"!==q?l(E,S,q,x.x,D,F,A,n,a):0,top:"none"!==T?l(S,E,T,x.y,P,B,L,r,h):0,my:d}):M},V.polys={
// POLY area coordinate calculator
//	Special thanks to Ed Cradock for helping out with this.
//	Uses a binary search algorithm to find suitable coordinates.
polygon:function(t,e){var i,s,o,n={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:I},r=0,a=[],h=1,l=1,c=0,d=0;for(
// First pass, sanitize coords and determine outer edges
r=t.length;r--;)i=[parseInt(t[--r],10),parseInt(t[r+1],10)],i[0]>n.position.right&&(n.position.right=i[0]),i[0]<n.position.left&&(n.position.left=i[0]),i[1]>n.position.bottom&&(n.position.bottom=i[1]),i[1]<n.position.top&&(n.position.top=i[1]),a.push(i);
// If it's the center corner...
if(
// Calculate height and width from outer edges
s=n.width=Math.abs(n.position.right-n.position.left),o=n.height=Math.abs(n.position.bottom-n.position.top),"c"===e.abbrev())n.position={left:n.position.left+n.width/2,top:n.position.top+n.height/2};else{
// Second pass, use a binary search algorithm to locate most suitable coordinate
for(;s>0&&o>0&&h>0&&l>0;)for(s=Math.floor(s/2),o=Math.floor(o/2),e.x===D?h=s:e.x===F?h=n.width-s:h+=Math.floor(s/2),e.y===P?l=o:e.y===B?l=n.height-o:l+=Math.floor(o/2),r=a.length;r--&&!(a.length<2);)c=a[r][0]-n.position.left,d=a[r][1]-n.position.top,(e.x===D&&c>=h||e.x===F&&h>=c||e.x===N&&(h>c||c>n.width-h)||e.y===P&&d>=l||e.y===B&&l>=d||e.y===N&&(l>d||d>n.height-l))&&a.splice(r,1);n.position={left:a[0][0],top:a[0][1]}}return n},rect:function(t,e,i,s){return{width:Math.abs(i-t),height:Math.abs(s-e),position:{left:Math.min(t,i),top:Math.min(e,s)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(t,e,i,s,o){var n=V.polys._angles[o.abbrev()],r=0===n?0:i*Math.cos(n*Math.PI),a=s*Math.sin(n*Math.PI);return{width:2*i-Math.abs(r),height:2*s-Math.abs(a),position:{left:t+r,top:e+a},adjustable:I}},circle:function(t,e,i,s){return V.polys.ellipse(t,e,i,i,s)}},V.svg=function(t,i,o){
// Ascend the parentNode chain until we find an element with getBBox()
for(var n,r,a,h,l,c,d,p,u,f=(s(e),i[0]),g=s(f.ownerSVGElement),m=f.ownerDocument,v=(parseInt(i.css("stroke-width"),10)||0)/2;!f.getBBox;)f=f.parentNode;if(!f.getBBox||!f.parentNode)return I;
// Determine which shape calculation to use
switch(f.nodeName){case"ellipse":case"circle":p=V.polys.ellipse(f.cx.baseVal.value,f.cy.baseVal.value,(f.rx||f.r).baseVal.value+v,(f.ry||f.r).baseVal.value+v,o);break;case"line":case"polygon":case"polyline":for(
// Determine points object (line has none, so mimic using array)
d=f.points||[{x:f.x1.baseVal.value,y:f.y1.baseVal.value},{x:f.x2.baseVal.value,y:f.y2.baseVal.value}],p=[],c=-1,h=d.numberOfItems||d.length;++c<h;)l=d.getItem?d.getItem(c):d[c],p.push.apply(p,[l.x,l.y]);p=V.polys.polygon(p,o);break;
// Unknown shape or rectangle? Use bounding box
default:p=f.getBBox(),p={width:p.width,height:p.height,position:{left:p.x,top:p.y}}}
// Shortcut assignments
// Convert position into a pixel value
// Check the element is not in a child document, and if so, adjust for frame elements offset
// Adjust by scroll offset of owner document
return u=p.position,g=g[0],g.createSVGPoint&&(r=f.getScreenCTM(),d=g.createSVGPoint(),d.x=u.left,d.y=u.top,a=d.matrixTransform(r),u.left=a.x,u.top=a.y),m!==e&&"mouse"!==t.position.target&&(n=s((m.defaultView||m.parentWindow).frameElement).offset(),n&&(u.left+=n.left,u.top+=n.top)),m=s(m),u.left+=m.scrollLeft(),u.top+=m.scrollTop(),p},V.imagemap=function(t,e,i,o){e.jquery||(e=s(e));var n,r,a,h,l,c=(e.attr("shape")||"rect").toLowerCase().replace("poly","polygon"),d=s('img[usemap="#'+e.parent("map").attr("name")+'"]'),p=s.trim(e.attr("coords")),u=p.replace(/,$/,"").split(",");
// If we can't find the image using the map...
if(!d.length)return I;
// Pass coordinates string if polygon
if("polygon"===c)h=V.polys.polygon(u,i);else{if(!V.polys[c])return I;for(a=-1,l=u.length,r=[];++a<l;)r.push(parseInt(u[a],10));h=V.polys[c].apply(this,r.concat(i))}
// Make sure we account for padding and borders on the image
// Add image position to offset coordinates
return n=d.offset(),n.left+=Math.ceil((d.outerWidth(I)-d.width())/2),n.top+=Math.ceil((d.outerHeight(I)-d.height())/2),h.position.left+=n.left,h.position.top+=n.top,h};var jt,/*
 * BGIFrame adaption (http://plugins.jquery.com/project/bgiframe)
 * Special thanks to Brandon Aaron
 */
zt='<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';s.extend(C.prototype,{_scroll:function(){var e=this.qtip.elements.overlay;e&&(e[0].style.top=s(t).scrollTop()+"px")},init:function(i){var o=i.tooltip;
// Create the BGIFrame element if needed
s("select, object").length<1&&(this.bgiframe=i.elements.bgiframe=s(zt).appendTo(o),
// Update BGIFrame on tooltip move
i._bind(o,"tooltipmove",this.adjustBGIFrame,this._ns,this)),
// redraw() container for width/height calculations
this.redrawContainer=s("<div/>",{id:R+"-rcontainer"}).appendTo(e.body),
// Fixup modal plugin if present too
i.elements.overlay&&i.elements.overlay.addClass("qtipmodal-ie6fix")&&(i._bind(t,["scroll","resize"],this._scroll,this._ns,this),i._bind(o,["tooltipshow"],this._scroll,this._ns,this)),
// Set dimensions
this.redraw()},adjustBGIFrame:function(){var t,e,i=this.qtip.tooltip,s={height:i.outerHeight(I),width:i.outerWidth(I)},o=this.qtip.plugins.tip,n=this.qtip.elements.tip;
// Adjust border offset
e=parseInt(i.css("borderLeftWidth"),10)||0,e={left:-e,top:-e},
// Adjust for tips plugin
o&&n&&(t="x"===o.corner.precedance?[A,D]:[L,P],e[t[1]]-=n[t[0]]()),
// Update bgiframe
this.bgiframe.css(e).css(s)},
// Max/min width simulator function
redraw:function(){if(this.qtip.rendered<1||this.drawing)return this;var t,e,i,s,o=this.qtip.tooltip,n=this.qtip.options.style,r=this.qtip.options.position.container;
// Set drawing flag
// If tooltip has a set height/width, just set it... like a boss!
// Reset width and add fluid class
// Grab our tooltip width (add 1 if odd so we don't get wrapping problems.. huzzah!)
// Grab our max/min properties
// Parse into proper pixel values
// Determine new dimension size based on max/min/current values
// Set the newly calculated width and remvoe fluid class
// Set drawing flag
return this.qtip.drawing=1,n.height&&o.css(L,n.height),n.width?o.css(A,n.width):(o.css(A,"").appendTo(this.redrawContainer),e=o.width(),1>e%2&&(e+=1),i=o.css("maxWidth")||"",s=o.css("minWidth")||"",t=(i+s).indexOf("%")>-1?r.width()/100:0,i=(i.indexOf("%")>-1?t:1)*parseInt(i,10)||e,s=(s.indexOf("%")>-1?t:1)*parseInt(s,10)||0,e=i+s?Math.min(Math.max(e,s),i):e,o.css(A,Math.round(e)).appendTo(r)),this.drawing=0,this},destroy:function(){
// Remove iframe
this.bgiframe&&this.bgiframe.remove(),
// Remove bound events
this.qtip._unbind([t,this.qtip.tooltip],this._ns)}}),jt=V.ie6=function(t){
// Proceed only if the browser is IE6
return 6===st.ie?new C(t):I},jt.initialize="render",z.ie6={"^content|style$":function(){this.redraw()}}})}(window,document);