/*!
 * Float Labels
 *
 * Version: 1.0.5
 * Author: Paul Ryley (http://geminilabs.io)
 * URL: https://github.com/geminilabs/float-labels.js
 * License: MIT
 */
/**
 * This plugin applies the float label pattern to a form.
 *
 * The float label pattern floats the inline label up above the input after the user focuses on the
 * form field or enters a value.
 *
 * Pros:
 * - User keeps context
 *   The user keeps the field’s context after they’ve focused and entered a value. This provides
 *   for a more accessible, less frustrating experience.
 * - Clean and scannable by default
 *   The pattern allows for a clean inline label experience by default, and only becomes a little
 *   more cluttered once the user has filled things out.
 * - Elegant
 *
 * Cons:
 * - Doesn’t provide room for both label and placeholder
 *   Because the label is occupying the same space as the placeholder, there’s no room for
 *   additional hinting.
 * - Small Label
 *   The label becomes small and possibly hard to read, but at the same time it’s not as big a deal.
 *   Once the user has interacted with the input, the label becomes a reference rather than an
 *   instruction.
 *
 * Links:
 * - http://bradfrost.com/blog/post/float-label-pattern/
 * - https://dribbble.com/shots/1254439--GIF-Mobile-Form-Interaction
 */
(function(){var e,t,a,l,n;e=window.jQuery||window.Zepto||window.$,/**
	 * Floating Labels
	 *
	 * @param array options [plugin options array]
	 */
e.fn.floatlabels=function(a){if(n=e.extend({regex:/text|password|email|number|search|url|tel/,exclude:[],customLabel:function(){},customEvent:function(){}},a),l=e(this),l.length){if("FORM"!==l.get(0).tagName){var s=l.find("form");if(0===s.length&&(s=l.closest("form")),0===s.length)return;l=s}l.addClass("floated-labels"),n.exclude.push(".no-label"),n.exclude=n.exclude.join(","),
// float input labels
l.find("input:not("+n.exclude+")").each(function(){n.regex.test(e(this).attr("type"))&&t(this)}),
// float textarea labels
l.find("textarea:not("+n.exclude+")").each(function(){t(this)}),
// float select labels
l.find("select:not("+n.exclude+")").each(function(){t(this,"formSelect"),e(this).parent().addClass("styled select")})}},/**
	 * Modifies a form element for floatlabels CSS styling
	 *
	 * @param object el          [the :input element]
	 * @param string placeholder [the :input placeholder] // @todo: need to detect if it exists!!
	 */
t=function(t,l){var s,i,r,c="floatlabel";
// add a placholder option to the select if it doesn't already exist
if(t=e(t),s=t.attr("id"),void 0===s&&(s=t.attr("name")),r=e('label[for="'+s+'"]'),i=r.text().replace("*","").trim(),"formSelect"===l){var o=t.children().first();i.length&&""===o.val()&&""===o.text()&&o.text(i)}if(!t.parent().hasClass(c)){i.length||(i=t.attr("placeholder")),t.addClass(c+"-input").wrap(_pf('<div class="{0} {0}-{1}"/>',c,s)),
// allow for custom defined events
n.customEvent.call(this,t);
// allow for custom defined labels
var f=n.customLabel.call(this,t,i);void 0!==f&&(i=f),r.length&&r.remove(),t.after(_pf('<label for="{0}" class="{1}-label">{2}</label>',s,c,i))}t.val().length&&t.parent().addClass("is-active"),
// Events
t.on("focus",function(){t.parent().addClass("is-focused")}),t.on("blur",function(){t.parent().removeClass("is-focused")}),t.on("keyup blur change",function(e){a(t,e)})},/**
	 * Fired when the :input value has changed or when it loses focus
	 *
	 * @param object el [the :input element]
	 * @param event  ev [the event that is fired on keyup|blur|change]
	 */
a=function(e,t){if(t){var a=t.keyCode||t.which;if(9===a)return}e.val().length?e.parent().addClass("is-active"):e.parent().removeClass("is-active")},/**
	 * Simplified printf implementation
	 */
_pf=function(e){var t=[].slice.call(arguments,1,arguments.length);return e.replace(/{(\d+)}/g,function(e,a){return void 0!==typeof t[a]?t[a]:e})}}).call(this);