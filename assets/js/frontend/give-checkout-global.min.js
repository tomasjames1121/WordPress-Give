/*!
 * Give Form Checkout JS
 *
 * @description: Handles JS functionality for the donation form checkout
 * @package:     Give
 * @subpackage:  Assets/JS
 * @copyright:   Copyright (c) 2015, WordImpress
 * @license:     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 */
var give_scripts,give_global_vars;jQuery(function(e){
// Set variables and format cc fields
function a(){r=e("#card_number"),l=e("#card_cvc"),d=e("#card_expiry"),s=e("form.give-form"),r.payment("formatCardNumber"),l.payment("formatCardCVC"),d.payment("formatCardExpiry")}
// format the currency with accounting.js
function t(e){return accounting.formatMoney(e,{symbol:"",decimal:give_global_vars.decimal_separator,thousand:give_global_vars.thousands_separator,precision:give_global_vars.number_decimals}).trim()}function i(e){return Math.abs(parseFloat(accounting.unformat(e,give_global_vars.decimal_separator)))}
//Helper function: Sets the multiselect amount values
function n(a){var t=a.parents("form"),i=a.val(),n=a.data("price-id"),o=t.find(".give-currency-symbol").text();
//Is this a custom amount selection?
if(
//remove old selected class & add class for CSS purposes
e(a).parents(".give-donation-levels-wrap").find(".give-default-level").removeClass("give-default-level"),e(a).addClass("give-default-level"),t.find("#give-amount").removeClass("invalid-amount"),"custom"===i)
//It is, so focus on the custom amount input
return t.find("#give-amount").val("").focus(),!1;
//check if price ID blank because of dropdown type
n||(n=a.find("option:selected").data("price-id")),
//Fade in/out price loading updating image
t.find(".give-updating-price-loader").stop().fadeIn().fadeOut(),
//update price id field for variable products
t.find("input[name=give-price-id]").val(n),
//update custom amount field
t.find("input#give-amount").val(i),t.find("span#give-amount").text(i);
//update checkout total
var r=o+i;"after"==give_global_vars.currency_pos&&(r=i+o),t.find(".give-final-total-amount").data("total",i).text(r)}var o=e(document);
// Update state/province field on checkout page
o.on("change","#give_cc_address input.card_state, #give_cc_address select",function(){var a=e(this),t=a.parents("form");if("card_state"!=a.attr("id")){
//Disable the State field until updated
t.find("#card_state").empty().append('<option value="1">'+give_global_vars.general_loading+"</option>").prop("disabled",!0);
// If the country field has changed, we need to update the state/province field
var i={action:"give_get_states",country:a.val(),field_name:"card_state"};e.ajax({type:"POST",data:i,url:give_global_vars.ajaxurl,xhrFields:{withCredentials:!0},success:function(e){if("nostates"==e){var a='<input type="text" id="card_state" name="card_state" class="cart-state give-input required" value=""/>';t.find('input[name="card_state"], select[name="card_state"]').replaceWith(a)}else t.find('input[name="card_state"], select[name="card_state"]').replaceWith(e);o.trigger("give_checkout_billing_address_updated",[e])}}).fail(function(e){window.console&&window.console.log&&console.log(e)})}return!1});/**
	 * Credit card verification
	 */
var r,l,d,s;a(),
// Trigger formatting function when gateway changes
o.on("give_gateway_loaded",function(){a()}),
// Toggle validation classes
e.fn.toggleError=function(e){return this.toggleClass("error",e),this.toggleClass("valid",!e),this},
// Validate cc fields on change
o.on("keyup change","#card_number, #card_cvc, #card_expiry",function(){var a=e(this),t=a.attr("id"),i=e.payment.cardType(r.val());if("card_number"===t){var n=s.find(".card-type");null===i?(n.removeClass().addClass("off card-type"),a.removeClass("valid").addClass("error")):n.removeClass("off").addClass(i),r.toggleError(!e.payment.validateCardNumber(r.val()))}if("card_cvc"===t&&l.toggleError(!e.payment.validateCardCVC(l.val(),i)),"card_expiry"===t){d.toggleError(!e.payment.validateCardExpiry(d.payment("cardExpiryVal")));var o=d.payment("cardExpiryVal");e("#card_exp_month").val(o.month),e("#card_exp_year").val(o.year)}}),
// Make sure a gateway is selected
o.on("submit","#give_payment_mode",function(){var a=e("#give-gateway option:selected").val();return 0==a?(alert(give_global_vars.no_gateway),!1):void 0}),
// Add a class to the currently selected gateway on click
o.on("click","#give-payment-mode-select input",function(){e("#give-payment-mode-select label.give-gateway-option-selected").removeClass("give-gateway-option-selected"),e("#give-payment-mode-select input:checked").parent().addClass("give-gateway-option-selected")}),
//Custom Donation Amount - If user focuses on field & changes value then updates price
o.on("focus",".give-donation-amount .give-text-input",function(a){var t=e(this).parents("form");
//Remove any invalid class
e(this).removeClass("invalid-amount"),
//Set data amount
e(this).data("amount",i(e(this).val())),
//This class is used for CSS purposes
e(this).parent(".give-donation-amount").addClass("give-custom-amount-focus-in"),
//Set Multi-Level to Custom Amount Field
t.find(".give-default-level, .give-radio-input").removeClass("give-default-level"),t.find(".give-btn-level-custom").addClass("give-default-level"),t.find(".give-radio-input").prop("checked",!1),//Radio
t.find(".give-radio-input.give-radio-level-custom").prop("checked",!0),//Radio
t.find(".give-select-level").prop("selected",!1),//Select
t.find(".give-select-level .give-donation-level-custom").prop("selected",!0)}),
//Custom Donation (fires on focus end aka "blur")
o.on("blur",".give-donation-amount .give-text-input",function(a){var n=e(this).data("amount"),o=i(e(this).val()),r=t(o);e(this).val(r),
//Does this number have a value?
(!e.isNumeric(o)||0>=o)&&e(this).addClass("invalid-amount"),
//If values don't match up then proceed with updating donation total value
n!==o&&(
//update checkout total (include currency sign)
e(this).parents("form").find(".give-final-total-amount").data("total",o).text(r),
//fade in/out updating text
e(this).next(".give-updating-price-loader").stop().fadeIn().fadeOut()),
//This class is used for CSS purposes
e(this).parent(".give-donation-amount").removeClass("give-custom-amount-focus-in")}),
//Multi-level Buttons: Update Amount Field based on Multi-level Donation Select
o.on("click touchend",".give-donation-level-btn",function(a){a.preventDefault(),//don't let the form submit
n(e(this))}),
//Multi-level Radios: Update Amount Field based on Multi-level Donation Select
o.on("click touchend",".give-radio-input-level",function(a){n(e(this))}),
//Multi-level Radios: Update Amount Field based on Multi-level Donation Select
o.on("change",".give-select-level",function(a){n(e(this))})});